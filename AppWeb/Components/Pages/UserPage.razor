@page "/User"
@using AppWeb.Services
@inject UserService UserService
@inject UserState UserState
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject CookiesService cookiesService

@if (_userContext != null)
{
    <PageTitle>@_userContext.Name</PageTitle>

    <MudGrid Justify="Justify.Center" Spacing="5">
        <MudItem xs="12" sm="9" md="8" lg="5">
            <MudCard Elevation="25">
                <MudCardHeader Class="justify-content-center position-relative">
                    <MudImage ObjectPosition="ObjectPosition.Center" Src="@($"{Const.url}/Doctypes/Avatars/{_userContext.Avatar}")" Style="max-height:200px;"></MudImage>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h1">@_userContext.Name</MudText>
                    <MudText Typo="Typo.h2" Style="@($"color:{Colors.Blue.Default}")">@@@_userContext.NickName</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <div class="row justify-content-center" style="margin-right:0px; margin-top:5%">
        @foreach (var post in _userContext.Posts.OrderByDescending(p => p.CreatedDate))
        {
            <AppWeb.Components.Pages.Tags.Posts.Post CurrentPost="@post" CurrentUser="UserState.CurrentUser"></AppWeb.Components.Pages.Tags.Posts.Post>
        }
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [SupplyParameterFromQuery]
    public string Id { get; set; } = string.Empty;

    private User? _userContext;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                UserState.CurrentUser = await cookiesService.RetrievedUser(UserState.CurrentUser);
                var user = await UserService.GetUserById(int.Parse(Id));

                if (user == null)
                    throw new Exception("User not found");

                _userContext = new User
                    {
                        UserId = user.UserId,
                        Name = user.Name,
                        NickName = user.NickName,
                        Avatar = user.Avatar,
                        Posts = await PostService.GetPostsAsync(user, UserState.CurrentUser)
                    };
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                NavigationManager.NavigateTo("/");
            }
        }

        await InvokeAsync(StateHasChanged);
    }
}
