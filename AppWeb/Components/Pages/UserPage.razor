@page "/User"
@using AppWeb.Services
@inject UserService UserService
@inject UserState UserState
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject CookiesService cookiesService
@if (_userContext != null)
{
    <PageTitle>@_userContext.Name</PageTitle>

    <div class="justify-content-center row" style="margin-top:2.5%">
        <div class="col-2 justify-content-center ">
            <img src="@Const.url/Doctypes/Avatars/@_userContext.Avatar" alt="Avatar" class="rounded-5 img-thumbnail" />
        </div>
    </div>

    <div class="justify-content-center row g-4">
        <h1 class="col-auto">@_userContext.Name</h1>
        <h1 class="col-auto" style="color:deepskyblue">@@@_userContext.NickName</h1>
    </div>


    <div class="row justify-content-center" style="margin-right:0px;">
        @foreach (var post in _userContext.Posts.OrderByDescending(p => p.CreatedDate))
        {
            <AppWeb.Components.Pages.Tags.Posts.Post CurrentPost="@post" CurrentUser="UserState.CurrentUser"></AppWeb.Components.Pages.Tags.Posts.Post>
        }
    </div>
}
@code {
    [SupplyParameterFromQuery]
    public string Id { get; set; } = string.Empty;
    private User? _userContext;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var user = await UserService.GetUserById(int.Parse(Id));
                if(user ==null)
                    throw new Exception("User not found");
                UserState.CurrentUser = await cookiesService.RetrievedUser(UserState.CurrentUser);
                
                _userContext = new User
                    {
                        UserId = user.UserId,
                        Name = user.Name,
                        NickName = user.NickName,
                        Avatar = user.Avatar,
                        Posts = await PostService.GetPostsAsync(user, UserState.CurrentUser)
                    };
                await InvokeAsync(StateHasChanged);
            }
            catch
            {
                Console.WriteLine("Error");
                NavigationManager.NavigateTo("/");  
            }
        }
    }
}
