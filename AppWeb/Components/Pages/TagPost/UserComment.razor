@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text.Json.Serialization
@using AppWeb.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject CookiesService CookieService
@inject PostService PostService
@inject NavigationManager Navigation

@if (CurrentUser != null && _commentModel != null)
{
    <div class="mt-5 row">
        <img class="col-2 rounded-5" src="/Doctypes/Avatars/@CurrentUser.Avatar" alt="User Avatar"/>
        <EditForm EditContext="EditContext" class="col-9" OnValidSubmit="HandlerSend">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="col-11 d-flex flex-column">
                <h4>@CurrentUser.Name</h4>
                <div class="d-flex">
                        <InputText @bind-Value="@_commentModel.CommentText" class="col-md-12"></InputText>
                    <button type="submit" class="btn btn-outline-success col-2">
                        <i class="bi bi-send"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
}
else
{
    <p>Please log in to upload file</p>
}

@code {
    [Parameter]
    public DbContext.Models.Post Post { get; set; } = new();
    [Parameter]
    public DbContext.Models.User? CurrentUser { get; set; }


    private EditContext? EditContext { get; set; }
    private CommentModel? _commentModel;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        
        if(CurrentUser == null)
            return;
        _commentModel = new CommentModel();
        EditContext = new EditContext(_commentModel);
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/CommentHub"))
                .ConfigureLogging(logging => logging.AddConsole())
                .Build();

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing SignalR: {ex.Message}");
        }
    }

    private async Task HandlerSend(EditContext editContext)
    {
        var model = (CommentModel)editContext.Model;
        try
        {
            if (CurrentUser != null)
            {
                Comments comment = new Comments()
                {
                    CommentText = model.CommentText,
                    PostId = Post.PostId,
                    UserId = CurrentUser.UserId
                };
                await PostService.SetCommentToPost(comment);

                if (_hubConnection is { State: HubConnectionState.Connected })
                {
                    comment.User = CurrentUser;
                    comment.Files = new List<Files>();

                    var options = new JsonSerializerOptions
                    {
                        ReferenceHandler = ReferenceHandler.Preserve
                    };
                    var commentJson = JsonSerializer.Serialize(comment, options);
                    await _hubConnection.InvokeAsync("SendComment", Post.PostId.ToString(), commentJson);
                }
            }

            if (_commentModel != null) _commentModel.CommentText = "";
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
            await _hubConnection.DisposeAsync();
    }

    public class CommentModel
    {
        [Required]
        [MinLength(1)]
        [MaxLength(500)]
        public string CommentText { get; set; } = string.Empty;
    }
}
