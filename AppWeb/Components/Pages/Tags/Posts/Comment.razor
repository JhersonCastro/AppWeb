@using System.Text.Json
@using System.Text.Json.Serialization
@using AppWeb.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject CookiesService CookieService
@inject PostService PostService
@inject NavigationManager NavigationManager

<div class="row g-3 justify-content-center">
        @foreach (var comment in post.Comments.OrderBy(c=>c.CommentId))
        {
            
            @if (comment.UserId == CurrentUser?.UserId)
            {
                <div class="row justify-content-end">

                    <button class="btn btn-danger col-auto" type="submit" @onclick="(args) => DeleteId(args, comment.CommentId)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                        </svg>
                    </button>
                </div>
            }
                    <div class="row align-items-start">
                        <div class="col-1">
                            <img src="@Const.url/Doctypes/Avatars/@comment.User.Avatar" class="img-fluid" alt="Image">
                        </div>
                        <div class="col-10 d-flex flex-column">
                            <MudLink Href="@($"{Const.url}/user?id={comment.User.UserId}")">
                                <h3>@comment.User.Name</h3>
                            </MudLink>
                            <h4 class="">@comment.CommentText</h4>
                        </div>
                    </div> 
        }
    <UserComment Post="post" CurrentUser="CurrentUser"></UserComment>
</div>

@code {
    [Parameter]
    public required DbContext.Models.Post post { get; set; }
    [Parameter]
    public required User? CurrentUser { get; set; }
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/CommentHub"))
                .ConfigureLogging(logging => logging.SetMinimumLevel(LogLevel.Debug))
                .Build();

            _hubConnection.On<string, string>("ReceiveComment", async (postId, json) =>
            {
                if (postId == post.PostId.ToString())
                {
                    var options = new JsonSerializerOptions { ReferenceHandler = ReferenceHandler.Preserve };
                    var comment = JsonSerializer.Deserialize<Comments>(json, options);
                    await AddComment(comment);
                }
            });
            _hubConnection.On<string, string>("RecDelComment", async (postId, commentId) =>
            {
                if (postId == post.PostId.ToString())
                {
                    var comment = post.Comments.FirstOrDefault(c => c.CommentId.ToString() == commentId);
                    await RemoveComment(comment);
                }
            });
            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing SignalR: {ex.Message}");
        }
    }

    public async Task DeleteId(MouseEventArgs args, int commentId)
    {
        if (_hubConnection != null) await _hubConnection.SendAsync("DeleteComment", post.PostId.ToString(), commentId.ToString());
    }
    private async Task AddComment(Comments? comment)
    {
        if (comment != null)
        {
            post.Comments.Add(comment);
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task RemoveComment(Comments? comment)
    {
        if (comment != null)
        {
            post.Comments.Remove(comment);
            await PostService.DeleteComment(comment);
            await InvokeAsync(StateHasChanged);
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
