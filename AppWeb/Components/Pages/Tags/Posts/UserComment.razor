@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text.Json.Serialization
@using AppWeb.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject PostService PostService
@inject NavigationManager Navigation

@if (CurrentUser != null && _commentModel != null)
{
    <div class="mt-5 row">
        <MudItem xs="12" sm="2" lg="2" class="d-flex justify-content-center align-items-center">
            <MudPaper Class="d-flex justify-content-center align-items-center" Style="height: 100%;">
                <MudImage Src="@($"{Const.url}/Doctypes/Avatars/{CurrentUser.Avatar}")" Alt="Avatar" Style="max-height: 150px; border-radius: 50%;" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="10" lg="10" class="d-flex flex-column">
            <EditForm EditContext="EditContext" OnValidSubmit="HandlerSend">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h4">@CurrentUser.Name</MudText>
                        <MudTextField autocomplete="false" T="string" @bind-Value="@_commentModel.CommentText" FullWidth="true" Label="Enter your comment here..." Style="margin-top: 1rem;" />
                    </MudCardContent>
                    <MudCardActions class="d-flex justify-content-end">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Success" Class="ml-2">
                            <MudIcon Icon="@Icons.Material.Filled.Send" />
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudItem>
    </div>

}
else
{
    <p>Please log in to upload file</p>
}

@code {
    [Parameter]
    public DbContext.Models.Post Post { get; set; } = new();
    [Parameter]
    public User? CurrentUser { get; set; }


    private EditContext? EditContext { get; set; }
    private CommentModel? _commentModel;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {

        if(CurrentUser == null)
            return;
        _commentModel = new CommentModel();
        EditContext = new EditContext(_commentModel);
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/CommentHub"))
                .ConfigureLogging(logging => logging.AddConsole())
                .Build();

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing SignalR: {ex.Message}");
        }
    }
    private async Task HandlerSend(EditContext editContext)
    {
        var model = (CommentModel)editContext.Model;
        try
        {
            if (CurrentUser != null)
            {
                Comments comment = new Comments()
                {
                    CommentText = model.CommentText,
                    PostId = Post.PostId,
                    UserId = CurrentUser.UserId
                };
                await PostService.SetCommentToPost(comment);

                if (_hubConnection is { State: HubConnectionState.Connected })
                {
                    comment.User = CurrentUser;
                    comment.Files = new List<Files>();

                    var options = new JsonSerializerOptions
                    {
                        ReferenceHandler = ReferenceHandler.Preserve
                    };
                    var commentJson = JsonSerializer.Serialize(comment, options);
                    await _hubConnection.InvokeAsync("SendComment", Post.PostId.ToString(), commentJson);
                }
            }

            if (_commentModel != null) _commentModel.CommentText = string.Empty;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
            await _hubConnection.DisposeAsync();
    }

    public class CommentModel
    {
        [Required]
        [MinLength(1)]
        [MaxLength(256)]
        public string CommentText { get; set; } = string.Empty;
    }
}
