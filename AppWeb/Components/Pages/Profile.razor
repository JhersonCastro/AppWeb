@page "/Profile"
@using System.ComponentModel.DataAnnotations
@using AppWeb.Services

@inject UserState UserState
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHotEnv
@inject UserService UserService
@inject CookiesService CookiesService

<div>
    @if (!string.IsNullOrEmpty(_error))
    {
        <p class="text-danger">Error: @_error</p>
    }
</div>

@if (UserState.CurrentUser==null)
{
    <div>
        Wait, retrieving the profile if exists...
    </div>
}else
{
    <PageTitle>@UserState.CurrentUser.Name</PageTitle>

    <button id="ShowProfileModal" class="btn btn-secondary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
            <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492M5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0"/>
            <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115z"/>
        </svg>
        Show Settings
    </button>
    <div class="justify-content-center row" style="margin-top:2.5%">
    <div class="col-2 justify-content-center ">
        <div> 
            <label for="fileInput" class="btn btn-primary position-absolute">
                    <i class="bi bi-upload"></i>
            </label> 
            <InputFile id="fileInput" OnChange="BtnAvatarHandlerAsync" accept=".png,.jpg,.jpeg" class="inputfile" style="display:none"/> 
            </div>
        <img src="/Doctypes/Avatars/@UserState.CurrentUser.Avatar" alt="Avatar" class="rounded-5 img-thumbnail" />

    </div>
    </div>

    <div class="justify-content-center row g-4">
        <h1 class="col-auto">@UserState.CurrentUser.Name</h1>
        <h1 class="col-auto" style="color:deepskyblue" >@@@UserState.CurrentUser.NickName</h1>
    </div>

    <div class="d-flex justify-content-center my-5">
        <div class="col-12 col-md-10 col-lg-8 p-4 border rounded bg-light">
            <EditForm EditContext="_editPostContext" FormName="CurrentPostContent" OnValidSubmit="HandlerPost">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="input-group mb-4">
                    <label class="input-group-text" for="groupPrivacity">Post privacy</label>
                    <InputSelect id="groupPrivacity" class="form-control" @bind-Value="@_postModel!.Privacy">
                        @foreach (var value in Enum.GetValues<PostPrivacy>())
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>
            
                <div class="form-floating mb-4">
                    <InputTextArea id="txtBody" class="form-control" style="height: 100px;" @bind-Value="@_postModel.Body" />
                    <label for="txtBody">Body</label>
                </div>
                <div class="row justify-content-end">
                    <label for="inputPostFile" class="btn btn-secondary col-md-auto same-sizebtn me-2" >Upload Files</label>
                    <InputFile OnChange="BtnUploadPostFiles" multiple accept=".png,.jpg,.jpeg,.mp4" id="inputPostFile" style="display:none" />

                    <button type="submit" class="btn btn-primary col-md-auto same-sizebtn" >Post!</button>
                </div>
            </EditForm>
            <section class='row g-3 p-3 justify-content-center'>
                @if (_currentUploadFiles > 0)
                {
                    <p>Please don't close this page, Uploading @_currentUploadFiles files</p>
                }
                @foreach (var file in _fileProgresses.Keys)
                {
                    <div class="progress mt-2"> 
                        <div class="progress-bar" role="progressbar" style="width: @(_fileProgresses[file])%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                            @($"{_fileProgresses[file]:0.00}%")
                        </div> 
                    </div>
                }
            </section>
        </div>
    </div>
    <div>
        <div class="row justify-content-center" style="margin-right:0px;">
            @foreach (var post in UserState.CurrentUser.Posts.OrderByDescending(p=> p.CreatedDate))
            {
                <div class="d-grid gap-2 d-md-flex justify-content-md-end p-3">
                    <button class="btn btn-danger" type="submit" @onclick="(args) => DeleteId(args, post)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                        </svg>
                    </button>
                </div>
                <AppWeb.Components.Pages.TagPost.Post CurrentPost="@post" ></AppWeb.Components.Pages.TagPost.Post>
            }
        </div>
    </div>
    @*
        TODO: Check the modal style;)
    *@
    <!--Region Modal-->
    <dialog id="ModalProfileSetting">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content ">
                <div class="modal-header">
                    <h5 class="modal-title">User Profile</h5>
                </div>
                <div class="modal-body">
                        <EditForm EditContext="_editUserUpdate">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                        
                            <div class="form-group">
                                <label for="inpUserNameUpt">Name</label>
                                <InputText id="inpUserNameUpt" class="form-control" @bind-Value="@_userModelUpdate.Name"></InputText>
                            </div>
                            <div class="form-group">
                                <label for="inpUserNickUpt">NickName</label>
                                <InputText id="inpUserNickUpt" class="form-control" @bind-Value="@_userModelUpdate.NickName"></InputText>
                            </div>  
                            <div class="form-group">
                                <label for="inpUserBioUpt">Bio</label>
                                <InputTextArea id="inpUserBioUpt" class="form-control" @bind-Value="@_userModelUpdate.Bio"></InputTextArea>
                            </div>
                        
                            <button type="submit" class="btn btn-primary col-auto">Save changes</button>
                        </EditForm>
                    
                        <button type="button" class="btn btn-secondary col-auto me-3" id="CloseProfileModal">Close</button>
                </div>
            </div>
        </div>
    </dialog>

    <script>
        const showButton = document.getElementById("ShowProfileModal")
        const dialog = document.getElementById("ModalProfileSetting")
        const closeButton = document.getElementById("CloseProfileModal")
        showButton.addEventListener("click", () => {
            dialog.showModal();
        });

        closeButton.addEventListener("click", () => {
            dialog.close();
        });

    </script>
    <!--EndRegion-->

}


@code {
    const int MaxFileSize = 5242880;
    const long MaxFileSizePost = 268435456;
    private EditContext? _editPostContext;
    private PostModel _postModel=new();
    private EditContext? _editUserUpdate;
    private UserUpdate _userModelUpdate = new();
    private string? _error;
    private int _currentUploadFiles;

    public class UserUpdate
    {
        [Required]
        [MinLength(5)]
        public string? Name { get; set; }

        [Required]
        [MinLength(5)]
        public string? NickName { get; set; }
        [MinLength(0)]
        public string Bio { get; set; } = "";
    }
    public class PostModel
    {
        [Required]
        [MinLength(1,ErrorMessage = "The body must have at least 1 character")]
        public string? Body { get; set; }
        [Required]
        public PostPrivacy Privacy { get; set; }
    }
    protected override Task OnInitializedAsync()
    {
        _editPostContext = new EditContext(_postModel);
        _editUserUpdate = new EditContext(_userModelUpdate);
        return base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                UserState.CurrentUser = await CookiesService.RetrievedUser(UserState.CurrentUser);
                if(UserState.CurrentUser == null)
                    throw new Exception("User not found");
                _userModelUpdate = new(){
                    Name = UserState.CurrentUser.Name, NickName = UserState.CurrentUser.NickName, Bio = UserState.CurrentUser.Bio}; 
                    _editUserUpdate = new EditContext(_userModelUpdate);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving session: {ex.Message}");
                NavigationManager.NavigateTo("/");
            }
        }
    }

    private async Task DeleteId(MouseEventArgs e, Post post)
    {
        try
        {
            await PostService.DeletePostAsync(post.PostId);
            UserState.CurrentUser?.Posts.Remove(post);
            _error = string.Empty;
        }
        catch (Exception ex)
        {
            UserState.CurrentUser?.Posts.Remove(post);
            _error = ex.Message;
        }
    }


    private async Task BtnAvatarHandlerAsync(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;
        try
        {
            var fileStream = browserFile.OpenReadStream(MaxFileSize);

            var uniqueFileName = Guid.NewGuid().ToString()+"." + browserFile.Name.Split('.').Last();
            var path = Path.Combine(WebHotEnv.WebRootPath, "Doctypes/Avatars", uniqueFileName);
            var file = new FileStream(path, FileMode.Create, FileAccess.Write);
            await fileStream.CopyToAsync(file);
            file.Close();
            fileStream.Close();
            if (UserState.CurrentUser != null)
            {
                UserState.CurrentUser.Avatar = uniqueFileName;
                await UserService.UpdateUserAsync(UserState.CurrentUser);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    readonly string[] _allowedExtensions = ["jpg", "mp4", "png", "jpeg"];

    private readonly Dictionary<Files, double> _fileProgresses = new Dictionary<Files, double>();
    private async Task BtnUploadPostFiles(InputFileChangeEventArgs e)
    {
        var browserFiles = e.GetMultipleFiles();
        _currentUploadFiles += browserFiles.Count();
        foreach (var file in browserFiles)
        {
            try
            {
                if (!_allowedExtensions.Contains(file.Name.Split('.').Last()))
                    throw new Exception("Invalid file type");

                var fileName = Path.GetFileName(file.Name);
                var uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(fileName)}";
                var path = Path.Combine(WebHotEnv.WebRootPath, "Doctypes", uniqueFileName);


                await using var fileStream = new FileStream(path, FileMode.Create);
                var buffer = new byte[81920];
                var readBytes = 0;
                var readStream = file.OpenReadStream(MaxFileSizePost);

                long totalBytes = file.Size;
                long uploadedBytes = 0;
                var tempFile = new Files { uri = uniqueFileName, fileType = file.ContentType };

                while ((readBytes = await readStream.ReadAsync(buffer)) != 0)
                {
                    await fileStream.WriteAsync(buffer, 0, readBytes);
                    uploadedBytes += readBytes;
                    var progress = (uploadedBytes / (double)totalBytes) * 100;
                    _fileProgresses[tempFile] = progress;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                _error = ex.Message;
            }
            _currentUploadFiles--;
        }

    }
    private async Task HandlerPost(EditContext editContext)
    {
        if (UserState.CurrentUser == null || _postModel?.Body == null)
            return;

        if (_currentUploadFiles > 0)
            _error = "Still uploading files, please wait";
        var files = _fileProgresses.Keys.Select(file => new Files() { uri = file.uri, fileType = file.fileType }).ToList();

        var post = new Post
        {
            UserId = UserState.CurrentUser.UserId,
            Body = _postModel.Body,
            Privacy = _postModel.Privacy,
            CreatedDate = DateTime.UtcNow,
            files = files,
            Comments = new List<Comments>()
        };
        await PostService.CreatePostAsync(post);

        _postModel.Body = "";
        _postModel.Privacy = PostPrivacy.p_public;
        _fileProgresses.Clear();

        UserState.CurrentUser.Posts.Add(post);
        StateHasChanged();
        }
    }
}
